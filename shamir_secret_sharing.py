# -*- coding: utf-8 -*-
"""Shamir_secret_sharing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WayelmJTXYo7oXorTjOS0mI4OfAghbBi
"""

import random
from functools import reduce

def generate_shares(S, t, n, p):
    # Generate random polynomial coefficients
    coefficients = [S] + [random.randint(0, p-1) for _ in range(t-1)]

    def polynomial(x):
        return sum([coefficients[i] * (x ** i) for i in range(t)]) % p

    shares = [(i, polynomial(i)) for i in range(1, n+1)]
    return shares

def reconstruct_secret(shares, p):
    def lagrange_interpolation(x, x_s, y_s, p):
        def prod(lst):
            return reduce(lambda x, y: x * y, lst, 1)

        k = len(x_s)
        assert k == len(y_s)
        result = 0
        for i in range(k):
            xi, yi = x_s[i], y_s[i]
            terms = [x - x_s[m] for m in range(k) if m != i]
            denom = [xi - x_s[m] for m in range(k) if m != i]
            numer = prod(terms) % p
            denom = prod(denom) % p
            lagrange_coeff = numer * pow(denom, -1, p) % p
            result = (result + yi * lagrange_coeff) % p
        return result

    x_s, y_s = zip(*shares)
    return lagrange_interpolation(0, x_s, y_s, p)

if __name__ == "__main__":

    print("1-Generate shares.")
    print("2-Find Secret.")
    choice = int(input("Select your operation type: "))

    if choice == 1:
      # Get user input
      S = int(input("Enter the secret (S): "))
      t = int(input("Enter the threshold (t): "))
      n = int(input("Enter the total number of shares (n): "))
      p = int(input("Enter a prime number greater than S (p): "))
      # Generate shares
      shares = generate_shares(S, t, n, p)
      print(f"Shares: {shares}")

    elif choice == 2:
      # Get user input
      t = int(input("Enter the threshold (t): "))
      n = int(input("Enter the total number of shares (n): "))
      p = int(input("Enter a prime number greater than S (p): "))
      # Get the t shares to reconstruct the secret
      selected_shares = []
      for i in range(t):
          x = int(input(f"Enter x{i+1} for share {i+1}: "))
          y = int(input(f"Enter y{i+1} for share {i+1}: "))
          selected_shares.append((x, y))
      # Reconstruct the secret
      reconstructed_secret = reconstruct_secret(selected_shares, p)
      print(f"Reconstructed secret: {reconstructed_secret}")
    else:
      print("Error!")